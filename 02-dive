#!/usr/bin/env python3
import argparse
import sys
import dataclasses


@dataclasses.dataclass
class Command:
    instruction: str
    operand: int

    @classmethod
    def from_string(cls, string):
        instruction, arg = string.strip().split(" ")
        return cls(instruction=instruction, operand=int(arg))


@dataclasses.dataclass
class StateA:
    depth: int
    position: int

    def evolve(self, **kwargs):
        return dataclasses.replace(self, **kwargs)


def process_command_a(command, state):
    if command.instruction == "forward":
        return state.evolve(position=state.position + command.operand)
    elif command.instruction == "down":
        return state.evolve(depth=state.depth + command.operand)
    elif command.instruction == "up":
        return state.evolve(depth=state.depth - command.operand)


@dataclasses.dataclass
class StateB(StateA):
    aim: int


def process_command_b(command, state):
    if command.instruction == "forward":
        return state.evolve(
            depth=state.depth + state.aim * command.operand,
            position=state.position + command.operand,
        )
    elif command.instruction == "down":
        return state.evolve(aim=state.aim + command.operand)

    elif command.instruction == "up":
        return state.evolve(aim=state.aim - command.operand)


def main(command_lines):
    commands = [Command.from_string(c) for c in command_lines]

    state_a = StateA(0, 0)
    state_b = StateB(0, 0, 0)
    
    for command in commands:
        state_a = process_command_a(command, state_a)
        state_b = process_command_b(command, state_b)

    print(f"1) {state_a.depth * state_a.position}")
    print(f"2) {state_b.depth * state_b.position}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Dive, Dive!")
    parser.add_argument("file", type=argparse.FileType("r"), default=sys.stdin)
    args = parser.parse_args()

    main(args.file.readlines())
