#!/usr/bin/env python3
import argparse
import sys
import awkward as ak
import numpy as np


def make_index(array):
    """Convert regular array into irregular index"""
    for i in range(array.ndim):
        array = ak.from_regular(array, axis=i)
    return array


def as_type(array, dtype):
    """Convert array value dtype.

    Fix for values_astype with Nd NumPy arrays.
    """
    return ak.values_astype(ak.regularize_numpyarray(array), dtype)


def main(argv=None):
    parser = argparse.ArgumentParser("Squid Game")
    parser.add_argument("file", type=argparse.FileType("r"), default=sys.stdin)
    args = parser.parse_args(args=argv)

    draw = ak.from_numpy(
        np.loadtxt(args.file, dtype=np.uint64, delimiter=",", max_rows=1)
    )
    board = ak.from_numpy(
        np.loadtxt(args.file, dtype=np.uint64).reshape(-1, 5, 5), regulararray=True
    )
    # Evolve state of board through each draw
    match = as_type(
        np.cumsum(
            draw[:, np.newaxis, np.newaxis, np.newaxis] == board,
            axis=0,
        ),
        np.bool_
    )

    # Find unmarked board values
    match_board, _ = np.broadcast_arrays(board, match)
    unmarked = match_board[~make_index(match)]

    # Sum unmarked values for each draw
    score = draw * np.sum(np.sum(unmarked, axis=-1), axis=-1)

    # Determine which boards have won
    win_by = np.any(np.all(match, axis=-1), axis=-1) | np.any(
        np.all(match, axis=-2), axis=-1
    )
    
    # Find which boards have won in exactly n moves
    win_exact = np.concatenate((win_by[:1], win_by[1:] & ~win_by[:-1]))

    first_score, last_score = np.ravel(score[win_exact])[[0, -1]]

    print(f"1) {first_score}")
    print(f"2) {last_score}")


if __name__ == "__main__":
    main()
